#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>
#include <omp.h>
#define K 4
#define N 1e6

int* array;

typedef struct Number 
{
    int begin;
    int end;
    int result;
    int square;
}Number;

void calculateExp(Number* a) 
{
    unsigned long i = 0;
    for (i = a->begin; i < a->end; i++)
    {     
        a->result += array[i];
        a->square += array[i] * array[i];    
    }
}    

int main()
{
    int j, i;
    Number interval[K];
    float average = 0.0, dispersion = 0.0, calculation = 0.0, calculationSquare = 0.0;
    int reading[K];
    array = (int*)malloc(sizeof(int) * N);
    srand(time(NULL));

    for (j = 0; j < N; j++)
        array[j] = rand()%100;
    #pragma omp barrier
    #pragma omp parallel for num_threads(K)
    for (i = 0; i < K; i++)
    {
        interval[i].begin = (N / K) * i;
        interval[i].end = (N / K) * (i + 1);
        interval[i].result = 0.0;
        interval[i].square = 0.0;
        calculateExp(interval + i);
    }

    for (j = 0; j < K; j++)    
    { 
        calculation += interval[j].result;
        calculationSquare += interval[j].square;
    }
    average = calculation / N;
    float averageSquare = calculationSquare / N;
    dispersion = averageSquare - average * average;
    printf ("Average = %f\nAverage square = %f\nSquare of average = %f\nDispersion =  %f\n",
        average, averageSquare, average * average, dispersion);
    free(array);
    return 0;
}
